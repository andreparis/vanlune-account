AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: An AWS Serverless Application.
Parameters:
  SecurityGroupId:
    Type: 'AWS::EC2::SecurityGroup::Id'
  SubNetId1:
    Type: 'AWS::EC2::Subnet::Id'
  SubNetId2:
    Type: 'AWS::EC2::Subnet::Id'
  EnvironmentType:
    Description: The environment type
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - uat
      - prod
    ConstraintDescription: 'Must be dev, uat or prod'
Mappings:
  EnvironmentVariablesMap:
    Function.Properties.CodeUri.Bucket:
      dev: vanlune-bin-dev
      uat: vanlune-bin-uat
      prod: vanlune-bin-prod
    Function.Properties.Orders.Bucket:
      dev: vanlune-database
      uat: vanlune-database
      prod: vanlune-database
    Stage.ApiGateway:
      dev: Dev
      uat: Uat
      prod: Prod
    DbSecretName: 
      dev: vanlune-db-dev
      uat: vanlune-db-dev
      prod: vanlune-db-dev
Resources:
 # API Functinos
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !FindInMap 
          - EnvironmentVariablesMap
          - Stage.ApiGateway
          - !Ref EnvironmentType
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
 #Accounts
  CreateAccount:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: vanlune-accounts-create
      Handler: >-
        Accounts.Application::Accounts.Application.Function::CreateAccount
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Accounts.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/accounts'
            Method: post        
      Environment:
        Variables:
          DB_SECRET: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          EMAIL_SEND: "andreparis.comp@gmail.com"
          EMAIL_TO: "andreparis.comp@gmail.com"
          SecretName: "vanlune-auth"
          PLAYERS2_URL: "http://localhost:3000"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  ConfirmAccount:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: vanlune-accounts-confirm-email
      Handler: >-
        Accounts.Application::Accounts.Application.Function::ConfirmAccount
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Accounts.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/accounts/confirm'
            Method: post        
      Environment:
        Variables:
          DB_SECRET: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          EMAIL_SEND: "andreparis.comp@gmail.com"
          EMAIL_TO: "andreparis.comp@gmail.com"
          SecretName: "vanlune-auth"
          Issuer: "PLAYER2"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  UpdateAccount:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: vanlune-accounts-update
      Handler: >-
        Accounts.Application::Accounts.Application.Function::UpdateAccount
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Accounts.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/accounts'
            Method: put        
      Environment:
        Variables:
          DB_SECRET: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          EMAIL_SEND: "andreparis.comp@gmail.com"
          EMAIL_TO: "andreparis.comp@gmail.com"
          SecretName: "vanlune-auth"
          Issuer: "PLAYER2"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  AuthenticateAccount:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: vanlune-accounts-authenticate
      Handler: >-
        Accounts.Application::Accounts.Application.Function::AuthenticateAccount
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Accounts.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/accounts/auth'
            Method: post        
      Environment:
        Variables:
          DB_SECRET: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          EMAIL_SEND: "andreparis.comp@gmail.com"
          EMAIL_TO: "andreparis.comp@gmail.com"
          SecretName: "vanlune-auth"
          Issuer: "PLAYER2"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  DeleteAccounts:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: vanlune-accounts-delete
      Handler: >-
        Accounts.Application::Accounts.Application.Function::DeleteAccounts
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Accounts.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/accounts'
            Method: delete        
      Environment:
        Variables:
          DB_SECRET: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          EMAIL_SEND: "andreparis.comp@gmail.com"
          EMAIL_TO: "andreparis.comp@gmail.com"
          SecretName: "vanlune-auth"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  UserPatch:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: vanlune-accounts-user-patch
      Handler: >-
        Accounts.Application::Accounts.Application.Function::UserPatch
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Accounts.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/accounts/roles/patch'
            Method: post        
      Environment:
        Variables:
          DB_SECRET: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          EMAIL_SEND: "andreparis.comp@gmail.com"
          EMAIL_TO: "andreparis.comp@gmail.com"
          SecretName: "vanlune-auth"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  RecoverPasswordEmail:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: vanlune-accounts-recover-password-email
      Handler: >-
        Accounts.Application::Accounts.Application.Function::RecoverPasswordEmail
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Accounts.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/accounts/recover/email'
            Method: post        
      Environment:
        Variables:
          DB_SECRET: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          EMAIL_SEND: "andreparis.comp@gmail.com"
          EMAIL_TO: "andreparis.comp@gmail.com"
          SecretName: "vanlune-auth"
          PLAYERS2_URL: "http://localhost:3000"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  RecoverPassword:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: vanlune-accounts-recover-password
      Handler: >-
        Accounts.Application::Accounts.Application.Function::RecoverPassword
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Accounts.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/accounts/recover/password'
            Method: post        
      Environment:
        Variables:
          DB_SECRET: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          EMAIL_SEND: "andreparis.comp@gmail.com"
          EMAIL_TO: "andreparis.comp@gmail.com"
          SecretName: "vanlune-auth"
          PLAYERS2_URL: "http://localhost:3000"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  UpdatePassword:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: vanlune-accounts-update-password
      Handler: >-
        Accounts.Application::Accounts.Application.Function::UpdatePassword
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Accounts.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/accounts/changepassword'
            Method: post        
      Environment:
        Variables:
          DB_SECRET: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          EMAIL_SEND: "andreparis.comp@gmail.com"
          EMAIL_TO: "andreparis.comp@gmail.com"
          SecretName: "vanlune-auth"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
 #Claims
  CreateClaim:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: vanlune-accounts-claim-create
      Handler: >-
        Accounts.Application::Accounts.Application.Function::CreateClaim
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Accounts.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/accounts/claims'
            Method: post        
      Environment:
        Variables:
          DB_SECRET: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          EMAIL_SEND: "andreparis.comp@gmail.com"
          EMAIL_TO: "andreparis.comp@gmail.com"
          SecretName: "vanlune-auth"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
 #ROLES
  CreateRoles:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: vanlune-accounts-role-create
      Handler: >-
        Accounts.Application::Accounts.Application.Function::CreateRoles
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Accounts.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/accounts/roles'
            Method: post        
      Environment:
        Variables:
          DB_SECRET: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          EMAIL_SEND: "andreparis.comp@gmail.com"
          EMAIL_TO: "andreparis.comp@gmail.com"
          SecretName: "vanlune-auth"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  RolePatch:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: vanlune-accounts-role-patch
      Handler: >-
        Accounts.Application::Accounts.Application.Function::RolePatch
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Accounts.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/accounts/roles/claims/patch'
            Method: post        
      Environment:
        Variables:
          DB_SECRET: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          EMAIL_SEND: "andreparis.comp@gmail.com"
          EMAIL_TO: "andreparis.comp@gmail.com"
          SecretName: "vanlune-auth"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2