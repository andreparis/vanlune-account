AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: An AWS Serverless Application.
Parameters:
  SecurityGroupId:
    Default: sg-02dbdd82f513a7733
    Type: 'AWS::EC2::SecurityGroup::Id'
  SubNetId1:
    Default: subnet-037e8b801c1e77db5
    Type: 'AWS::EC2::Subnet::Id'
  SubNetId2:
    Default: subnet-0309164262b4dd853
    Type: 'AWS::EC2::Subnet::Id'
  EnvironmentType:
    Description: The environment type
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - uat
      - prod
    ConstraintDescription: 'Must be dev, uat or prod'
Mappings:
  EnvironmentVariablesMap:
    Function.Properties.CodeUri.Bucket:
      dev: vanlune-bin-dev
      uat: vanlune-bin-uat
      prod: vanlune-bin-prod
    Function.Properties.Orders.Bucket:
      dev: vanlune-database
      uat: vanlune-database
      prod: vanlune-database
    Stage.ApiGateway:
      dev: Dev
      uat: Uat
      prod: Prod
    DbSecretName: 
      dev: db-dev
      uat: db-uat
      prod: db-prod
Resources:
 # API Functinos
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      Auth: 
        AddDefaultAuthorizerToCorsPreflight: False
        Authorizers: 
          LambdaAuth: 
            FunctionArn: arn:aws:lambda:us-east-1:277944362602:function:vanlune-auth
            FunctionPayloadType: TOKEN
            Type: Lambda
            Identity:
              Header: AuthorizationToken
              ReauthorizeEvery: 0
        DefaultAuthorizer: LambdaAuth
      StageName: !FindInMap 
        - EnvironmentVariablesMap
        - Stage.ApiGateway
        - !Ref EnvironmentType
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
        
  GatewayResponse:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      ResponseType: MISSING_AUTHENTICATION_TOKEN
      RestApiId: !Ref ApiGatewayApi
      StatusCode: '404'
  GatewayNotAuthResponse:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      ResponseType: UNAUTHORIZED
      RestApiId: !Ref ApiGatewayApi
      StatusCode: '401'
  GatewayResponseDefault4XX:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      ResponseType: DEFAULT_4XX
      RestApiId: !Ref ApiGatewayApi
  GatewayResponseDefault5XX:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      ResponseType: DEFAULT_5XX
      RestApiId: !Ref ApiGatewayApi
  AuthPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: arn:aws:lambda:us-east-1:277944362602:function:vanlune-auth
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayApi}/authorizers/LambdaAuth"
 #Accounts
  CreateAccount:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: player2-accounts-create
      Handler: >-
        Accounts.Application::Accounts.Application.Function::CreateAccount
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Accounts.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/accounts'
            Method: post        
      Environment:
        Variables:
          CONN_STRING: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          AWS_SNS_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/sns"
          AWS_SECRET_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/secret"
          SecretName: "vanlune-auth"
          SecretName_ConfirmEmail: "vanlune-confirm-email"
          PLAYERS2_URL: "https://www.player2.store/"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  GetAllAccountsByFilters:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: player2-accounts-get-by-filters
      Handler: >-
        Accounts.Application::Accounts.Application.Function::GetAllAccountsByFilters
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Accounts.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/accounts/filters'
            Method: get        
      Environment:
        Variables:
          CONN_STRING: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          AWS_SNS_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/sns"
          AWS_SECRET_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/secret"
          SecretName: "vanlune-auth"
          SecretName_ConfirmEmail: "vanlune-confirm-email"
          PLAYERS2_URL: "https://www.player2.store/"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  ConfirmAccount:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: player2-accounts-confirm-email
      Handler: >-
        Accounts.Application::Accounts.Application.Function::ConfirmAccount
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Accounts.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/accounts/confirm'
            Method: post        
      Environment:
        Variables:
          CONN_STRING: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          AWS_SNS_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/sns"
          AWS_SECRET_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/secret"
          SecretName: "vanlune-auth"
          Issuer: "PLAYER2"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  UpdateAccount:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: player2-accounts-update
      Handler: >-
        Accounts.Application::Accounts.Application.Function::UpdateAccount
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Accounts.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/accounts'
            Method: put        
      Environment:
        Variables:
          CONN_STRING: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          AWS_SNS_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/sns"
          AWS_SECRET_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/secret"
          SecretName: "vanlune-auth"
          Issuer: "PLAYER2"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  AuthenticateAccount:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: player2-accounts-authenticate
      Handler: >-
        Accounts.Application::Accounts.Application.Function::AuthenticateAccount
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Accounts.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/accounts/auth'
            Method: post
            Auth:
                Authorizers: null
                DefaultAuthorizer: null
      Environment:
        Variables:
          CONN_STRING: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          AWS_SNS_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/sns"
          AWS_SECRET_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/secret"
          SecretName: "vanlune-auth"
          Issuer: "PLAYER2"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  DeleteAccounts:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: player2-accounts-delete
      Handler: >-
        Accounts.Application::Accounts.Application.Function::DeleteAccounts
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Accounts.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/accounts'
            Method: delete        
      Environment:
        Variables:
          CONN_STRING: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          AWS_SNS_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/sns"
          AWS_SECRET_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/secret"
          SecretName: "vanlune-auth"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  UserPatch:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: player2-accounts-user-patch
      Handler: >-
        Accounts.Application::Accounts.Application.Function::UserPatch
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Accounts.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/accounts/roles/patch'
            Method: post        
      Environment:
        Variables:
          CONN_STRING: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          AWS_SNS_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/sns"
          AWS_SECRET_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/secret"
          SecretName: "vanlune-auth"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  RecoverPasswordEmail:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: player2-accounts-recover-password-email
      Handler: >-
        Accounts.Application::Accounts.Application.Function::RecoverPasswordEmail
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Accounts.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/accounts/recover/email'
            Method: post        
      Environment:
        Variables:
          CONN_STRING: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          AWS_SNS_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/sns"
          AWS_SECRET_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/secret"
          SecretName_RecoverEmail: "vanlune-recover-email"
          PLAYERS2_URL: "https://www.player2.store/"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  RecoverPassword:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: player2-accounts-recover-password
      Handler: >-
        Accounts.Application::Accounts.Application.Function::RecoverPassword
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Accounts.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/accounts/recover/password'
            Method: post        
      Environment:
        Variables:
          CONN_STRING: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          AWS_SNS_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/sns"
          AWS_SECRET_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/secret"
          SecretName: "vanlune-auth"
          PLAYERS2_URL: "https://www.player2.store/"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  UpdatePassword:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: player2-accounts-update-password
      Handler: >-
        Accounts.Application::Accounts.Application.Function::UpdatePassword
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Accounts.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/accounts/changepassword'
            Method: post        
      Environment:
        Variables:
          CONN_STRING: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          AWS_SNS_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/sns"
          AWS_SECRET_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/secret"
          SecretName: "vanlune-auth"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
 #Claims
  CreateClaim:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: player2-accounts-claim-create
      Handler: >-
        Accounts.Application::Accounts.Application.Function::CreateClaim
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Accounts.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/accounts/claims'
            Method: post        
      Environment:
        Variables:
          CONN_STRING: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          AWS_SNS_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/sns"
          AWS_SECRET_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/secret"
          SecretName: "vanlune-auth"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
 #ROLES
  CreateRoles:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: player2-accounts-role-create
      Handler: >-
        Accounts.Application::Accounts.Application.Function::CreateRoles
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Accounts.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/accounts/roles'
            Method: post        
      Environment:
        Variables:
          CONN_STRING: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          AWS_SNS_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/sns"
          AWS_SECRET_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/secret"
          SecretName: "vanlune-auth"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  GetAllRoles:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: player2-accounts-role-get-all
      Handler: >-
        Accounts.Application::Accounts.Application.Function::GetAllRoles
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Accounts.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/accounts/roles'
            Method: get        
      Environment:
        Variables:
          CONN_STRING: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          AWS_SNS_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/sns"
          AWS_SECRET_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/secret"
          SecretName: "vanlune-auth"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
  RolePatch:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: player2-accounts-role-patch
      Handler: >-
        Accounts.Application::Accounts.Application.Function::RolePatch
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Accounts.zip
      MemorySize: 256
      Timeout: 900
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        HttpPost: 
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: '/accounts/roles/claims/patch'
            Method: post        
      Environment:
        Variables:
          CONN_STRING: !FindInMap 
            - EnvironmentVariablesMap
            - DbSecretName
            - !Ref EnvironmentType
          AWS_SNS_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/sns"
          AWS_SECRET_URL: "https://sv82auhxwk.execute-api.us-east-1.amazonaws.com/Dev/aws/int/secret"
          SecretName: "vanlune-auth"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2